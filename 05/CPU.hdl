// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=AInstruction);
    And(a=instruction[15], b=true, out=CInstruction);
    And(a=CInstruction, b=instruction[3], out=writeM);
    Mux16(a=instruction, b=ToFirstMux, sel=CInstruction, out=FromFirstMux);
    And(a=CInstruction, b=instruction[5], out=ARegisterLoad);
    Or(a=AInstruction, b=ARegisterLoad, out=SaveAddress);
    ARegister(in=FromFirstMux, load=SaveAddress, out=ToPc, out=ToSecondMux, out[0..14]=addressM);
    Mux16(a=ToSecondMux, b=inM, sel=instruction[12], out=ToALUB);
    And(a=instruction[4], b=CInstruction, out=RegisterDLoad);
    DRegister(in=ToDRegister, load=RegisterDLoad, out=ToALUA);
    ALU(x=ToALUA, y=ToALUB, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=ToFirstMux, out=ToDRegister, zr=ZeroControl, ng=NegativeControl);
    DMux8Way(in=CInstruction, sel=instruction[0..2], a=null, b=JGT, c=JEQ, d=JGE, e=JLT, f=JNE, g=JLE, h=JMP);
    Not(in=NegativeControl, out=NotNegative);
    Not(in=ZeroControl, out=NotZero);
    And(a=NotZero, b=NotNegative, out=PositiveNonZero);
    And(a=PositiveNonZero, b=JGT, out=JGTO);
    And(a=JEQ, b=ZeroControl, out=JEQO);
    And(a=JGE, b=NotNegative, out=JGEO);
    And(a=JLT, b=NegativeControl, out=JLTO);
    And(a=JNE, b=NotZero, out=JNEO);
    Or(a=NegativeControl, b=ZeroControl, out=NegativeOrZero);
    And(a=JLE, b=NegativeOrZero, out=JLEO);
    And(a=true, b=JMP, out=JMPO);
    Or(a=JGTO, b=JEQO, out=FirstOr);
    Or(a=JGEO, b=JLTO, out=SecondOr);
    Or(a=JNEO, b=JLEO, out=ThirdOr);
    Or(a=FirstOr, b=JMPO, out=FourthOr);
    Or(a=SecondOr, b=ThirdOr, out=FifthOr);
    Or(a=FourthOr, b=FifthOr, out=ToPCLoad);
    Not(in=ToPCLoad, out=Inc);
    PC(in=ToPc, load=ToPCLoad, inc=Inc, reset=reset, out[0..14]=pc);
}